<?xml version="1.0" encoding="UTF-8" ?>
<XmlTestCampaign name="create stream between A_Top and A_Bottom">
    <device>
        <name>A_Top</name>
        <ip>127.0.0.1</ip>
        <port>9009</port>
    </device>
    <device>
    	<name>A_Bottom</name>
    	<ip>127.0.0.1</ip>
   	<port>9009</port>
 	</device>
        
    <variable>sourceId</variable>
    <variable>destId</variable>

    <testcase name="createSource">
        <device>A_Top</device>

        <node>device/streaming/sesssssions/sources</node>            <!-- Change to node "sources" of device 1-->

        <action>                         <!-- Create new source  save return value in var "sourceId"-->
            <type> emberfunction </type>
            <name> create </name>
            <assignTo> $sourceId</assignTo>
        </action>

        <result>
        	<node>device/streaming/sessions/sources</node>
            <assert>
                <type>NotNull</type>
                <actual>
                	<value>$sourceId</value>
            	</actual>
                <expected></expected>
            </assert>
        </result>


    </testcase>

    <testcase name="changeSourceName">
        <device>A_Top</device>
        <dependency>createSource</dependency>

        <node>device/streaming/sessions/sources/$sourceId</node>            <!-- Change to node "senders>senderId" -->

        <action>             <!-- connect sender with Audio-ra0/0 -->
            <type> setAttribute </type>
            <name> name </name>
            <value> TestSource</value>
            <assignTo> </assignTo>
        </action>


        <result>                        <!-- check if sender state is 1-->
            <node>device/streaming/sessions/sources/$sourceId</node>
            <assert>
                <type>Equals</type>
                <actual>
                    <action>
                        <type> getAttribute </type>
                        <name> name </name>
                    </action>
                </actual>
                <expected>TestSource</expected>
            </assert>
        </result>
    </testcase>

    <testcase name="mapSenderToPhysicalInput">
        <device>A_Top</device>
        <dependency>createSource</dependency>

        <node>device/streaming/streams/senders/$sourceId</node>            <!-- Change to node "senders>senderId" -->

        <action>             <!-- connect sender with Audio-ra0/0 -->
            <type> setAttribute </type>
            <name> map </name>
            <value>RAVENNA Audio-ra0/0</value>
        </action>


        <result>                        <!-- check if sender state is 1-->
            <node>device/streaming/streams/senders/$sourceId</node>
            <assert>
                <type>Equals</type>
                <actual>
                    <action>
                        <type> getAttribute </type>
                        <name> state </name>
                    </action>
                </actual>
                <expected>1</expected>
            </assert>
        </result>
    </testcase>

    <testcase name="createDestination">
    <device>A_Bottom</device>

    <node>device/streaming/sessions/destinations</node>

    <action>
      <type> emberfunction </type>
      <name> create </name>
      <assignTo> $destId </assignTo>
    </action>

    <result>
      <node>device/streaming/sessions/destinations</node>
      <assert>
        <type>NotNull</type>
        <actual>
          <value>$destId</value>
        </actual>
        <expected></expected>
      </assert>
    </result>


  </testcase>

  <testcase name="mapDestinationToPhysicalOutput">
    <device>A_Bottom</device>
    <dependency>createDestination</dependency>

    <node>device/media/RAVENNA Audio-ra0/outputs/_0</node>

    <action>
      <type> setAttribute </type>
      <name> in </name>
      <value> _$destId/0</value>
    </action>


    <result>
      <node>device/media/RAVENNA Audio-ra0/outputs/_0</node>
      <assert>
        <type>Equals</type>
        <actual>
          <action>
            <type> getAttribute </type>
            <name> in </name>
          </action>
        </actual>
        <expected>_$destId/0</expected>
      </assert>
    </result>
  </testcase>

  <testcase name="receiveStream">
    <device>A_Bottom</device>
    <dependency>createDestination</dependency>

    <node>device/streaming/sessions/destinations/$destId</node>

    <action>
      <type> setAttribute </type>
      <name> uri </name>
      <value> ravenna_session:TestSource</value>
      <assignTo> </assignTo>
    </action>


    <result>
      <node>device/streaming/streams/receivers/$destId</node>
      <assert>
        <type>Equals</type>
        <actual>
          <action>
            <type> getAttribute </type>
            <name> state </name>
          </action>
        </actual>
        <expected>1</expected>
      </assert>
    </result>
  </testcase>

  <testcase name="removeDestination">
        <device>A_Bottom</device>
        <dependency>createDestination</dependency>
    
        <node>device/streaming/sessions/destinations/$destId</node>
    
        <action>
            <type> emberfunction </type>
            <name> remove </name>
          <assignTo>$destId </assignTo>
      
    </action>
    
    
        <result>
            <node>device/streaming/sessions/destinations</node>
          <assert>
            <type>IsNull</type>
            <actual>
              <value>$destId</value>
            </actual>
            <expected></expected>
          </assert>
      </result>
  </testcase>

  <testcase name="removeSource">
    <device>A_Top</device>
    <dependency>createSource</dependency>

    <node>device/streaming/sessions/sources/$sourceId</node>

    <action>
      <type> emberfunction </type>
      <name> remove </name>
      <assignTo>$sourceId </assignTo>
    </action>


    <result>
      <node>device/streaming/sessions/destinations</node>
      <assert>
        <type>IsNull</type>
        <actual>
          <value>$sourceId</value>
        </actual>
        <expected></expected>
      </assert>

    </result>

  </testcase>

</XmlTestCampaign>


	